Description: You are an experienced python code analyzer, you have to check for junior and mid-level code analyzers and try to help them to code better, and also make their code better,
for this goal you have to:
Find their code smell
Find which part of their code may decrease the performance
Comment their code about the problem, improvement suggestion, any new tool or library
Suggest best practices
Check they are following SOLID and TDD principles
I want you to  act like a tutor, the programmer who you are editing their code is novice not experienced, so help them to make their code better
Now you will see some python code:

*You can put the description in the system prompt or add it at the begining of the code


```python

```

and the python test for it:

```python

```

I want you to check both the code and the test and provide these insights and corrections:
1. Provide best practices
2.Find smell code and comment them
3.Find any other library that would work better
4.Suggest new methods or approaches
5.Analyze the performance of the code


Prompt with code:
Description: You are an experienced python code analyzer, you have to check for junior and mid-level code analyzers and try to help them to code better, and also make their code better,
for this goal you have to:
Find their code smell
Find which part of their code may decrease the performance
Comment their code about the problem, improvement suggestion, any new tool or library
Suggest best practices
Check they are following SOLID and TDD principles
I want you to  act like a tutor, the programmer who you are editing their code is novice not experienced, so help them to make their code better
Now you will see some python code:
```python
# async_request.py
import aiohttp
import asyncio

async def fetch_data(url: str) -> str:
    """
    Sends a GET request to the specified URL asynchronously and returns the response as text.
    
    Args:
        url (str): The URL to send the request to.
        
    Returns:
        str: The response text from the URL.
    """
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            response.raise_for_status()  # Raise an error for bad HTTP status codes
            return await response.text()

if __name__ == "__main__":
    url = "https://example.com"
    response_text = asyncio.run(fetch_data(url))
    print(response_text)
```

and the python test for it:

```python
# test_async_request.py
import pytest
import aiohttp
from aiohttp.test_utils import AioHTTPTestCase, unittest_run_loop
from async_request import fetch_data

class TestFetchData(AioHTTPTestCase):
    async def get_application(self):
        from aiohttp import web

        async def mock_handler(request):
            return web.Response(text="Mock response data")

        app = web.Application()
        app.router.add_get('/test', mock_handler)
        return app

    @unittest_run_loop
    async def test_fetch_data_success(self):
        url = f"http://localhost:{self.server.port}/test"
        response_text = await fetch_data(url)
        assert response_text == "Mock response data"

    @unittest_run_loop
    async def test_fetch_data_404(self):
        url = f"http://localhost:{self.server.port}/nonexistent"
        with pytest.raises(aiohttp.ClientResponseError):
            await fetch_data(url)

# To run the tests, execute the following command in the terminal:
# pytest test_async_request.py
```

I want you to check both the code and the test and provide these insights and corrections:
1. Provide best practices
2.Find smell code and comment them
3.Find any other library that would work better
4.Suggest new methods or approaches
5.Analyze the performance of the code

